import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Real
import Mathlib.Data.Real.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.MeasureTheory.Constructions.BorelSpace.Basic

--I added this import - it's used in the Egorov file so we probably need it
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic
import Mathlib.MeasureTheory.Measure.Regular

open Nat Int Real Finset MeasureTheory
open scoped Topology

-- aim is to prove Lusin's Theorem for the Borel sigma algebra specifically
-- this is slightly more restrictive than the theorem in Cohn's book


namespace MeasureTheory

-- Calling universal variables
variable  {α : Type*} [TopologicalSpace α][T2Space α][LocallyCompactSpace α][MeasurableSpace α ][BorelSpace α]{μ : Measure α}
variable [BorelSpace ℝ] (f: α → ℝ)
variable [Preorder ι][Countable ι](a : ι → ℝ)

--Proof that a countable union of singletons in the Reals is measurable
-- We believe these two theorems run correctly 
theorem singleton_measurable (a : ℝ) : MeasurableSet ( {a}) := by
  exact MeasurableSet.singleton a
  done


theorem countable_union_singleton_measurable  : MeasurableSet (⋃ i, {a i}) := by
  refine MeasurableSet.iUnion ?h
  intro b
  exact singleton_measurable (a b)
  done

/-The issue is in this theorem. When we try to apply the above theorem for countable unions of singletons we get error
"typeclass instance problem is stuck, it is often due to metavariables"-/

theorem preimage_union_singleton_measurable (hf : Measurable f) : MeasurableSet (f ⁻¹'(⋃ i, {a i})) := by
  apply MeasurableSpace.map_def.mp
  exact countable_union_singleton_measurable
  done
