import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Real
import Mathlib.Data.Real.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.Init.Order.Defs
import Mathlib.Order.Filter.AtTopBot
import Mathlib.Order.Filter.Basic

set_option maxHeartbeats 0

open MeasureTheory ENNReal Filter
open scoped Topology

-- Aim is to prove Lusin's Theorem for the Borel sigma algebra specifically
-- This is slightly more restrictive than the theorem in Cohn's book

namespace Lusin

-- Calling universal variables
variable  {Œ± : Type*} [TopologicalSpace Œ±][T2Space Œ±][LocallyCompactSpace Œ±][MeasurableSpace Œ±][BorelSpace Œ±](Œº: Measure Œ±) [Measure.Regular Œº]
variable [BorelSpace ‚Ñù] (f: Œ± ‚Üí ‚Ñù) (a: ‚Ñï ‚Üí ‚Ñù) (h: Measurable f)
variable (B : Set Œ±)(hm : MeasurableSet B)(hf : Œº B ‚â† ‚àû)(hf2 : Œº B < ‚àû)(hcount : f '' B = Set.range a)
variable (Œµ : ‚Ñù)(hŒµ: 0 < Œµ)

-- We define the sequence of sets A_i as follows
def A (i : ‚Ñï) := f ‚Åª¬π'({a i}) ‚à© B

-- Since f maps to {a1, a2, ...} we have ‚ãÉ i f ‚Åª¬π({a i}) is the whole space, and thus ‚ãÉ i A_i = B which is proven here

theorem B_eq_union_Ai : ‚ãÉ i, f ‚Åª¬π'({a i}) ‚à© B = B  := by
  rw[‚Üê Set.iUnion_inter B (fun i ‚Ü¶ f ‚Åª¬π'({a i})), ‚Üê Set.preimage_iUnion, ‚Üê Set.range_eq_iUnion a, ‚Üê hcount ]
  simp
  simp_rw[Set.subset_preimage_image f B]
  done

--Here we show some sets are measurable for later use
theorem measurable_A : ‚àÄ (i : ‚Ñï), MeasurableSet (A f a B i) := by
  intro b
  apply MeasurableSet.inter
  apply MeasurableSet.preimage
  apply MeasurableSet.singleton (a b)
  apply h
  exact hm
  done

--We can just use 'MeasurableSet.iUnion (measurable_A f a h B hm)' later and then delete this
theorem measurable_Ai_Union : MeasurableSet (‚ãÉ i, A f a B i) := by
  apply MeasurableSet.iUnion (measurable_A f a h B hm)
  done

--Next we show partial unions are monotone
theorem monotone_A : Monotone (fun k => ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k) , A f a B i) := by
  unfold Monotone
  intro x y
  simp
  intro hxy j hjx
  have hjy := hjx.trans hxy
  apply Set.subset_biUnion_of_mem
  exact hjy
  done

theorem mwe_2 (s: ‚Ñï ‚Üí Set Œ±) (j : ‚Ñï): s j ‚äÜ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ j) , s i  := by
  apply Set.subset_biUnion_of_mem
  apply Nat.le_refl
  done

theorem union_partial_eq_union (s: ‚Ñï ‚Üí Set Œ±): ‚ãÉ i, s i =
 ‚ãÉ i, (‚ãÉ j, ‚ãÉ (_ : j ‚â§ i) , s j ) := by
  rw[superset_antisymm_iff]
  constructor
  simp
  exact fun i i_1 _ => Set.subset_iUnion s i_1
  simp
  intro t
  ---have hj := Set.subset_biUnion_of_mem (Nat.le_refl j)
  have hj := mwe_2 s t
  apply le_trans hj
  exact Set.subset_iUnion (fun x =>  ‚ãÉ j, ‚ãÉ (_ : j ‚â§ x), s j) t
  done

theorem union_partial_A_eq_B: ‚ãÉ k,  ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i = B := by
  rw[(union_partial_eq_union (A f a B)).symm]
  unfold A
  apply B_eq_union_Ai
  exact hcount
  done

theorem continuity_of_measure: Tendsto (fun k ‚Ü¶ Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i))
  atTop (ùìù (Œº (B))) := by
  nth_rw 2 [‚Üê union_partial_A_eq_B f a B hcount]
  apply tendsto_measure_iUnion
  apply monotone_A
  done

theorem difference_epsilon (hs : (2‚Åª¬π : ‚Ñù) > 0) (hŒµ : (Œµ : ‚Ñù ) > 0) : ‚àÉ k : ‚Ñï, Œº (B)  ‚â§  Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i) + ENNReal.ofReal (Œµ * 2‚Åª¬π)  := by
  have ‚ü®N, hN‚ü© := (ENNReal.tendsto_atTop hf).1
    (continuity_of_measure Œº f a B hcount) (ENNReal.ofReal (Œµ * 2‚Åª¬π)) (by
      rw [gt_iff_lt, ENNReal.ofReal_pos]
      exact mul_pos hŒµ hs)
  have hl := (hN N le_rfl).1
  have hy := tsub_le_iff_right.mp hl
  exact ‚ü®N, hy‚ü©
  done

--- These three results will be required to turns this result into a set difference

theorem partial_union_A_measurable (N : ‚Ñï): MeasurableSet (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N) , A f a B i )  := by
  apply Set.Finite.measurableSet_biUnion
  exact Set.finite_Iic N
  intro b
  exact fun _ => measurable_A f a h B hm b
  done

theorem subset (N : ‚Ñï) : ‚ãÉ i, ‚ãÉ (_ : i ‚â§ N) , A f a B i ‚äÜ B := by
  unfold A
  aesop
  done

theorem finite (N : ‚Ñï ): Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) ‚â†  ‚àû := by
  have hk := subset f a B N
  have ht := (measure_mono hk).trans_lt hf2
  aesop
  done

theorem set_difference_epsilon (k: ‚Ñï) (hs : (2‚Åª¬π : ‚Ñù) > 0): ‚àÉ k : ‚Ñï, Œº (B \ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i) ‚â§ ENNReal.ofReal (Œµ * 2‚Åª¬π) := by
  have ht := difference_epsilon Œº f a B hf hcount Œµ hs hŒµ
  let ‚ü® k, h4 ‚ü© := ht
  have hq := measure_diff (subset f a B k) (partial_union_A_measurable f a h B hm k) (finite Œº f a B hf2 k)
