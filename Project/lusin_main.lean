import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Real
import Mathlib.Data.Real.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.Init.Order.Defs
import Mathlib.Order.Filter.AtTopBot
import Mathlib.Order.Filter.Basic



set_option maxHeartbeats 0

open MeasureTheory ENNReal Filter Finset BigOperators
open scoped Topology

-- Aim is to prove Lusin's Theorem for the Borel sigma algebra specifically
-- This is slightly more restrictive than the theorem in Cohn's book

namespace Lusin

-- Calling universal variables
variable  {Œ± : Type*} [TopologicalSpace Œ±][T2Space Œ±][LocallyCompactSpace Œ±][MeasurableSpace Œ±][BorelSpace Œ±](Œº: Measure Œ±) [Measure.Regular Œº]
variable [BorelSpace ‚Ñù] (f: Œ± ‚Üí ‚Ñù) (a: ‚Ñï ‚Üí ‚Ñù) (h: Measurable f)
variable (B : Set Œ±)(hm : MeasurableSet B)(hf : Œº B ‚â† ‚àû)(hcount : f '' B = Set.range a)
variable (Œµ : ‚Ñù)(hŒµ: 0 < Œµ)

-- We define the sequence of sets A_i as follows
def A (i : ‚Ñï) := f ‚Åª¬π'({a i}) ‚à© B

-- Since f maps to {a1, a2, ...} we have ‚ãÉ i f ‚Åª¬π({a i}) is the whole space, and thus
-- ‚ãÉ i A_i = B which is proven here
theorem B_eq_union_Ai : ‚ãÉ i, f ‚Åª¬π'({a i}) ‚à© B = B  := by
  rw[‚Üê Set.iUnion_inter B (fun i ‚Ü¶ f ‚Åª¬π'({a i})), ‚Üê Set.preimage_iUnion, ‚Üê Set.range_eq_iUnion a, ‚Üê hcount ]
  simp only [Set.inter_eq_right]
  simp_rw[Set.subset_preimage_image f B]
  done

--Here we show some sets are measurable for later use
theorem measurable_A : ‚àÄ (i : ‚Ñï), MeasurableSet (A f a B i) := by
  intro b
  apply MeasurableSet.inter
  apply MeasurableSet.preimage
  apply MeasurableSet.singleton (a b)
  apply h
  exact hm
  done

--We can just use 'MeasurableSet.iUnion (measurable_A f a h B hm)' later and then delete this
theorem measurable_Ai_Union : MeasurableSet (‚ãÉ i, A f a B i) := by
  apply MeasurableSet.iUnion (measurable_A f a h B hm)
  done

--Next we show partial unions are monotone
theorem monotone_A : Monotone (fun k => ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k) , A f a B i) := by
  unfold Monotone
  intro x y
  simp
  intro hxy j hjx
  have hjy := hjx.trans hxy
  apply Set.subset_biUnion_of_mem
  exact hjy
  done

theorem mwe_2 (s: ‚Ñï ‚Üí Set Œ±) (j : ‚Ñï): s j ‚äÜ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ j) , s i  := by
  apply Set.subset_biUnion_of_mem
  apply Nat.le_refl
  done

theorem union_partial_eq_union (s: ‚Ñï ‚Üí Set Œ±): ‚ãÉ i, s i =
 ‚ãÉ i, (‚ãÉ j, ‚ãÉ (_ : j ‚â§ i) , s j ) := by
  rw[superset_antisymm_iff]
  constructor
  simp
  exact fun i i_1 _ => Set.subset_iUnion s i_1
  simp
  intro t
  ---have hj := Set.subset_biUnion_of_mem (Nat.le_refl j)
  have hj := mwe_2 s t
  apply le_trans hj
  exact Set.subset_iUnion (fun x =>  ‚ãÉ j, ‚ãÉ (_ : j ‚â§ x), s j) t
  done

theorem union_partial_A_eq_B: ‚ãÉ k,  ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i = B := by
  rw[(union_partial_eq_union (A f a B)).symm]
  unfold A
  apply B_eq_union_Ai
  exact hcount
  done

theorem continuity_of_measure: Tendsto (fun k ‚Ü¶ Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i))
  atTop (ùìù (Œº (B))) := by
  nth_rw 2 [‚Üê union_partial_A_eq_B f a B hcount]
  apply tendsto_measure_iUnion
  apply monotone_A
  done

theorem difference_epsilon : ‚àÉ k : ‚Ñï, Œº (B)  ‚â§
Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i) + ENNReal.ofReal (Œµ * (1/2))  := by
  have ‚ü®N, hN‚ü© := (ENNReal.tendsto_atTop hf).1
    (continuity_of_measure Œº f a B hcount) (ENNReal.ofReal (Œµ * (1/2))) (by
      rw [gt_iff_lt, ENNReal.ofReal_pos]
      exact mul_pos hŒµ one_half_pos)
  have hl := (hN N le_rfl).1
  have hy := tsub_le_iff_right.mp hl
  exact ‚ü®N, hy‚ü©
  done

--- These results will be required to turns this result into a set difference
theorem partial_union_A_measurable (N : ‚Ñï): MeasurableSet (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) := by
  apply Set.Finite.measurableSet_biUnion
  exact Set.finite_Iic N
  intro b
  exact fun _ => measurable_A f a h B hm b
  done

theorem subset (N : ‚Ñï) : ‚ãÉ i, ‚ãÉ (_ : i ‚â§ N) , A f a B i ‚äÜ B := by
  unfold A
  aesop
  done

--The final result
theorem set_difference_epsilon : ‚àÉ N : ‚Ñï,
Œº (B \ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) ‚â§ ENNReal.ofReal (Œµ * (1/2)) := by
  have ht := difference_epsilon Œº f a B hf hcount Œµ hŒµ 
  let ‚ü® k, h4 ‚ü© := ht
  have hq := measure_diff (subset f a B k) (partial_union_A_measurable f a h B hm k)
    (ne_top_of_lt (LE.le.trans_lt (measure_mono (subset f a B k)) (Ne.lt_top hf)))
  have h5 := tsub_le_iff_left.mpr h4
  rw[‚Üê hq] at h5
  exact ‚ü® k, h5 ‚ü©
  done

--Here we obtain the compact subsets K_i of A_i for each i, after two technical results
theorem finite_A (i : ‚Ñï) : Œº (A f a B i) ‚â† ‚àû := by
  have ss := Set.inter_subset_right (f ‚Åª¬π' {a i}) B
  have hy := (measure_mono ss).trans_lt (Ne.lt_top hf)
  exact LT.lt.ne hy
  done




---We will take Œ¥ = Œµ/2N once N exists

theorem compact_subset(Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥  )(i : ‚Ñï) : ‚àÉ K : Set Œ±,  K ‚äÜ (A f a B i) ‚àß  IsCompact K ‚àß Œº ((A f a B i)\K) ‚â§  ENNReal.ofReal Œ¥    := by
  have hw := MeasurableSet.exists_isCompact_lt_add (measurable_A f a h B hm i) (finite_A Œº f a B hf i) (zero_lt_iff.mp (ofReal_pos.mpr hŒ¥))
  let ‚ü® K, HK ‚ü© := hw
  have ‚ü® HK1, HK2, HK3 ‚ü© := HK
  have hq := measure_diff (HK.1) (IsCompact.measurableSet HK2) (ne_top_of_lt (LE.le.trans_lt (measure_mono (Set.Subset.trans HK1 (Set.inter_subset_right (f ‚Åª¬π' {a i}) B))) (Ne.lt_top hf)))
  have HK4 := tsub_le_iff_left.mpr (le_of_lt HK3)
  rw[‚Üê hq] at HK4
  exact ‚ü® K, HK1, HK2, HK4 ‚ü©
  done

theorem compact_subset_N (Œ¥ : ‚Ñù)(hŒ¥ : 0 < Œ¥  )(N: ‚Ñï) :  ‚àÉ K : ‚Ñï ‚Üí Set Œ±, ‚àÄ i ‚â§ N, K i ‚äÜ (A f a B i) ‚àß IsCompact (K i) ‚àß Œº ((A f a B i)\ (K i)) ‚â§  ENNReal.ofReal Œ¥ := by
  sorry




--These results will be needed to manipulate the sets

theorem set_diff (b c a : Set Œ± )(h1 : b ‚äÜ c)(h2: c ‚äÜ a) : a\b = a\c ‚à™ c\b := by
  exact (Set.diff_union_diff_cancel h2 h1).symm
  done


--triv needed for set_diff_union_0
theorem triv(a b c : Set Œ±) (h : c ‚äÜ b) (hc : a ‚à© b = ‚àÖ ) : (a ‚äÜ c.compl) := by

  sorry

--This is the easier case of what we want to prove
theorem set_diff_union_0(a1 a2 k1 k2 : Set Œ±)(h1: k1 ‚äÜ a1) (h2: k2 ‚äÜ a2) (h3 : a1 ‚à© a2 = ‚àÖ ) :
(Set.diff a1 k1) ‚à™ (Set.diff a2 k2) = Set.diff (a1 ‚à™ a2) (k1 ‚à™ k2) := by
  unfold Set.diff
  simp

  have hh1 : {x | x ‚àà a1 ‚àß ¬¨(x ‚àà k1 ‚à® x ‚àà k2)} = a1 ‚à© k2.compl ‚à© k1.compl := by
    sorry
    done

  have hh2 : {x | x ‚àà a2 ‚àß ¬¨(x ‚àà k1 ‚à® x ‚àà k2)} = a2 ‚à© k1.compl ‚à© k2.compl := by
    sorry
    done

  rw[hh1, hh2]

  have hh3 : {a | a ‚àà a1 ‚àß ¬¨a ‚àà k1} ‚à™ {a | a ‚àà a2 ‚àß ¬¨a ‚àà k2} = (a1 ‚à© k1.compl) ‚à™ (a2 ‚à© k2.compl) := by
    aesop

  rw[hh3]

  have hh4 : a1 ‚à© k2.compl = a1 := by
    exact Set.inter_eq_left.mpr (triv a1 a2 k2 h2 h3)

  have hh5 : a2 ‚à© k1.compl = a2 := by
    rw[Set.inter_comm] at h3
    exact Set.inter_eq_left.mpr (triv a2 a1 k1 h1 h3)

  rw[hh4, hh5]


--This is the general version we need which should follow from set_diff_union_0 using induction

theorem set_diff_union (n : ‚Ñï) (A : ‚Ñï ‚Üí Set Œ±)(K : ‚Ñï ‚Üí Set Œ±)(h1 : ‚àÄ i,  K i  ‚äÜ A i) (h2 : ‚àÄ i j, i ‚â† j ‚Üí A i  ‚à© A j = ‚àÖ ) :
‚ãÉ (_ : i ‚â§ n), (Set.diff (A i) (K i)) = Set.diff (‚ãÉ (_ : i ‚â§ n), A i) (‚ãÉ (_ : i ‚â§ n), K i) := by
  ---induction' n with n ih
  sorry


--Will need isCompact_iUnion, and sub-additivity of measure


theorem lusin: ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº (B \ K ) ‚â§ ENNReal.ofReal Œµ ‚àß Continuous (Set.restrict K f) := by
  have H : ‚àÉ K : Set Œ±, IsCompact K ‚àß Œº (B \ K ) ‚â§ ENNReal.ofReal Œµ := by
    have HE := set_difference_epsilon Œº f a h B hm hf hcount Œµ hŒµ
    let ‚ü® N, HSD ‚ü© := HE
    have p : 0 < (Œµ/(2*N)) := by
      sorry
    have HK := compact_subset_N Œº f a B (Œµ/(2*N)) p N
    rcases HK with ‚ü®K,P‚ü©

    --- want to split P up into three statements

    have KMP : IsCompact (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i) := by
      --exact isCompact_iUnion
      sorry



    use (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i)
    constructor
    apply KMP

    have h1 : (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i) ‚äÜ (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) := by
      sorry

    have h2 : (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) ‚äÜ B  := by
      sorry


    have S1 : Œº (B\(‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i)) ‚â§  Œº (B\(‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) )  + Œº ((‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i)\(‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i)) := by
      have SS := (Set.diff_union_diff_cancel h2 h1).symm

      ---have SS1 := measure_union_le (Set.diff B ((‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i))) (Set.diff (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i) (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i))

      sorry
    have S2 : Œº ((‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i)\(‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), K i)) ‚â§ ‚àë·∂† (i : Icc 0 N), Œº ((A f a B i) \ (K i)) := by
      have SS2 := set_diff_union 

      sorry
    have S3 : ‚àë·∂† (i : Icc 0 N), Œº ((A f a B i) \ (K i)) ‚â§  ENNReal.ofReal (Œµ/2) := by
      sorry



---(Œº((A f a B i)\(K i)))


    sorry
  let ‚ü® K, H1, H2 ‚ü© := H


  have HC : Continuous (Set.restrict K f) := by
    sorry

  exact ‚ü® K, H1, H2, HC ‚ü©
  done


 
