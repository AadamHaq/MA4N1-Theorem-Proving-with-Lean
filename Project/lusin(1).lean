import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Real
import Mathlib.Data.Real.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.MeasureTheory.Measure.Regular
import Mathlib.Init.Order.Defs
import Mathlib.Order.Filter.AtTopBot
import Mathlib.Order.Filter.Basic

set_option maxHeartbeats 0

open MeasureTheory ENNReal Filter
open scoped Topology

-- Aim is to prove Lusin's Theorem for the Borel sigma algebra specifically
-- This is slightly more restrictive than the theorem in Cohn's book

namespace Lusin

-- Calling universal variables
variable  {Œ± : Type*} [TopologicalSpace Œ±][T2Space Œ±][LocallyCompactSpace Œ±][MeasurableSpace Œ±][BorelSpace Œ±](Œº: Measure Œ±) [Measure.Regular Œº]
variable [BorelSpace ‚Ñù] (f: Œ± ‚Üí ‚Ñù) (a: ‚Ñï ‚Üí ‚Ñù) (h: Measurable f)
variable (B : Set Œ±)(hm : MeasurableSet B)(hf : Œº B ‚â† ‚àû)(hf2 : Œº B < T)(hcount : f '' B = Set.range a)
variable (Œµ : ENNReal)(hŒµ: 0 < Œµ)(hj: Œµ < T)


-- We define the sequence of sets A_i as follows
def A (i : ‚Ñï) := f ‚Åª¬π'({a i}) ‚à© B

-- Since f maps to {a1, a2, ...} we have ‚ãÉ i f ‚Åª¬π({a i}) is the whole space, and thus ‚ãÉ i A_i = B which is proven here

theorem B_eq_union_Ai : ‚ãÉ i, f ‚Åª¬π'({a i}) ‚à© B = B  := by
  rw[‚Üê Set.iUnion_inter B (fun i ‚Ü¶ f ‚Åª¬π'({a i})), ‚Üê Set.preimage_iUnion, ‚Üê Set.range_eq_iUnion a, ‚Üê hcount ]
  simp
  simp_rw[Set.subset_preimage_image f B]
  done

/-
Here we show some sets are measurable for later use
-/
theorem measurable_A : ‚àÄ (i : ‚Ñï), MeasurableSet (A f a B i) := by
  intro b
  apply MeasurableSet.inter
  apply MeasurableSet.preimage
  apply MeasurableSet.singleton (a b)
  apply h
  exact hm
  done

theorem measurable_Ai_Union : MeasurableSet (‚ãÉ i, A f a B i) := by
  apply MeasurableSet.iUnion (measurable_A f a h B hm)
  done

--Next goal is to show that the sequence of partial unions is increasing
--The Monotone theorem works, but it requires "partial_union_increasing" which is sorried out.
--mwe is basically the same as partial_union_increasing I just simplified the statement as much as possible

theorem monotone_A : Monotone (fun k => ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k) , A f a B i) := by
  unfold Monotone
  intro x y
  simp
  intro hxy j hjx
  have hjy := hjx.trans hxy
  apply Set.subset_biUnion_of_mem
  exact hjy
  done

theorem mwe_2 (s: ‚Ñï ‚Üí Set Œ±) (j : ‚Ñï): s j ‚äÜ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ j) , s i  := by
  apply Set.subset_biUnion_of_mem
  apply Nat.le_refl
  done

/-We need a result which says that the union of partial unions is just the union.
This together with B_eq_Union_Ai will give us convergence up to Œº(B) when we apply
continuity of measure. -/

theorem union_partial_eq_union (s: ‚Ñï ‚Üí Set Œ±): ‚ãÉ i, s i =
 ‚ãÉ i, (‚ãÉ j, ‚ãÉ (_ : j ‚â§ i) , s j ) := by
  rw[superset_antisymm_iff]
  constructor
  simp
  exact fun i i_1 _ => Set.subset_iUnion s i_1
  simp
  intro t
  ---have hj := Set.subset_biUnion_of_mem (Nat.le_refl j)
  have hj := mwe_2 s t
  apply le_trans hj
  exact Set.subset_iUnion (fun x =>  ‚ãÉ j, ‚ãÉ (_ : j ‚â§ x), s j) t
  done

theorem union_partial_A_eq_B: ‚ãÉ k,  ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i = B := by
  rw[(union_partial_eq_union (A f a B)).symm]
  unfold A
  apply B_eq_union_Ai
  exact hcount
  done

---this theorem should follow directly from tendsto_measure_iUnion and union_partial_A_eq_B

theorem continuity_of_measure: Tendsto (fun k ‚Ü¶ Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i))
  atTop (ùìù (Œº (B))) := by
  nth_rw 2 [‚Üê union_partial_A_eq_B f a B hcount]
  apply tendsto_measure_iUnion
  apply monotone_A
  done

theorem union_partial_A_eq_B1: B \ ‚ãÉ k,  ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k) , A f a B i = ‚àÖ := by
  rw[(union_partial_eq_union (A f a B)).symm]
  unfold A
  rw[Set.diff_eq_empty]
  apply subset_of_eq
  exact (B_eq_union_Ai f a B hcount).symm
  done

theorem epsilon1  : ‚àÉ k : ‚Ñï, Œº (B) - Œµ  ‚â§  Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i) := by
  have ‚ü®N, hN‚ü© := (ENNReal.tendsto_atTop hf).1
    (continuity_of_measure Œº f a B hcount) Œµ (by
      rw [gt_iff_lt]
      exact hŒµ )
  exact ‚ü®N, (hN N le_rfl).1‚ü©
  done
--- Technical issue with moving the epsilon over to the other side

theorem mwe3 (a b e : ENNReal) (h : e < T ) (hk: b - e ‚â§ a ) : (b ‚â§ a + e) := by
exact tsub_le_iff_right.mp hk

theorem epsilon2  : ‚àÉ k : ‚Ñï, Œº (B) ‚â§ Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i) + Œµ  := by
  have ‚ü® N, hN ‚ü© := epsilon1 Œº f a B hf hcount Œµ hŒµ
  have hy := mwe3 (Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ N), A f a B i)) (Œº B) Œµ hj hN
  aesop

--- These three results will be required to turns this result into a set difference

theorem partial_union_A_measurable (N : ‚Ñï): MeasurableSet (‚ãÉ i ‚àà Set.Iic N , A f a B i )  := by
  apply Set.Finite.measurableSet_biUnion
  exact Set.finite_Iic N
  intro b
  exact fun a_1 => measurable_A f a h B hm b
  done

theorem subset (N : ‚Ñï) : ‚ãÉ i ‚àà Set.Iic N , A f a B i ‚äÜ B := by
  unfold Set.Iic
  unfold A
  aesop
  done

theorem finite (N : ‚Ñï ): Œº (‚ãÉ i ‚àà Set.Iic N , A f a B i) ‚â†  T  :=
by
  have hk := subset f a B N
  have ht := (measure_mono hk).trans_lt hf2
  aesop
  done


theorem epsilon3 (k:‚Ñï ): ‚àÉ k : ‚Ñï, Œº (B \ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ k), A f a B i) ‚â§  Œµ := by
  have hs := epsilon2 Œº f a B hf hcount Œµ hŒµ hj
  let ‚ü® M, h4 ‚ü© := hs
  have h1 := subset f a B M
  have h2 := partial_union_A_measurable f a h B hm M
  have h3 := finite Œº f a B hf2 M
  have hq := measure_diff h1 h2 h3
  --- hq should prove the theorem













-- class of regular functions in Mathlib: https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Measure/Regular.html#MeasureTheory.Measure.Regular note that there are definitions of inner regular and outer regular incorporated with this: https://leanprover-community.github.io/mathlib4_docs/Mathlib/MeasureTheory/Measure/Regular.html

/-
Theorem: the countable union of compact sets is compact.
-/

-- I think we want to invoke: https://leanprover-community.github.io/mathlib4_docs/Mathlib/Topology/Compactness/Compact.html#isCompact_iUnion

-- e.g. "apply Mathlib.Topology.Compactness.Compact.isCompact_iUnion"

theorem fio  (a b c: ENNReal)(f : c ‚â† ‚àû) (h : a ‚â§  b + c ): a - c ‚â§ b := by
  exact tsub_le_iff_right.mpr h


/-
Theorem (kinda obvious but may need a bitesize outline here): If K is a compact subset of a set A and f is constant on A, i.e. A = f^-1({a}) for a singleton {a}, then f is constant on K.
-/

theorem preimage_of_const_func_on_compact_subset_is_constant (K : Set Œ±) (a : ‚Ñù) (hk : IsCompact K) (hs : K ‚äÇ f ‚Åª¬π' ({a} : Set ‚Ñù)) : (‚àÄ x ‚àà K, f x = a) := by sorry


/-
Lemma: if f is a measurable function which is disjoint on the sets A and B, with f constant on A and f constant on B, then f is continuous on A ‚ãÉ B.
-/

lemma meas_func_const_on_disjoint_pair_is_continuous (A B : Set Œ±) (a b : ‚Ñù) (hf : Measurable f) (ha : ‚àÄ x : A, f x = a) (hb : ‚àÄ x : B, f x = b) (hac : IsCompact A) (hbc : IsCompact B) (hd : A ‚à© B = ‚àÖ) : ContinuousOn f (A‚à™B) := by sorry


/-
Intermediate lemma: if f is a measurable function with K = ‚ãÉK_i for K_i disjoint compact sets, then f is constant on each K_i. Hence, f|K (i.e. f restricted to the set K) continuous.


Useful resources:
Restriction of a set to a function f: https://leanprover-community.github.io/mathlib4_docs/Mathlib/Data/Set/Function.html#Set.restrict
-/

theorem meas_func_const_on_disjoint_finite_union_is_continuous (n : ‚Ñï) (K : ‚Ñï ‚Üí Set Œ±) (hpd: ‚àÄ i ‚àà Set.Icc 1 n, Pairwise (Disjoint on K i)) : ContinuousOn f (‚ãÉ i ‚àà Set.Icc 1 n, K i) := by sorry

--theorem measurable_func_constant_on_sets_is_continuous_on__union [preorder œÑ] [countable œÑ] (hcs : compact K)

-- NOTE: in the below it may be better to use ‚Ñï for sequence indexing rather than preorder/countable Œπ (that was just the convention that the Egorov proof followed)
-- theorem measurable_func_constant_on_sets_is_continuous_on_union {Œ± : Type u_1} {Œ≤ : Type u_2} {c : Œ≤} {m1: MeasurableSpace Œ±} {m2: TopologicalSpace Œ±} {m3 : MeasurableSpace Œ≤} {f : Œ± ‚Üí Œ≤ } {K : Œπ ‚Üí set Œ±} [Preorder Œπ] [Countable Œπ] (hf : Measurable f) (hcs : ‚àÄ (i : Œπ), IsCompact (K i)) (hck : f (K i) = c) (hpd: ‚àÄ (i : Œπ), Pairwise (Disjoint on K)) : (1=2) := by sorry


-- write countable f theorem here



/-
From proof in MA359 notes: the sequence of functions f_n := 2^-n * floor(2^n f) converges uniformly to f.
-/

-- write uniform convergence proof here



/- Lusin's Theorem for f taking **uncountably many values**:
-/
theorem Lusin [measure.Regular Œº] :
‚àÉ t, MeasurableSet t ‚àß CompactSet t ‚àß Œº Set.diff a \ t ‚â§ ENNReal.ofReal Œµ ‚àß
  Continuous Set.Restrict f t  := by
sorry

 ‚àÉ t, MeasurableSet t ‚àß CompactSet t ‚àß Œº Set.diff a \ t ‚â§ ENNReal.ofReal Œµ ‚àß
  Continuous Set.Restrict f t  := by sorry
