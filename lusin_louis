import Mathlib.Topology.Basic
import Mathlib.Topology.Instances.Real
import Mathlib.Data.Real.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Basic
import Mathlib.MeasureTheory.MeasurableSpace.Defs
import Mathlib.MeasureTheory.Constructions.BorelSpace.Basic

--I added this import - it's used in the Egorov file so we probably need it 
import Mathlib.MeasureTheory.Function.StronglyMeasurable.Basic

-- For regular measure
import Mathlib.MeasureTheory.Measure.Regular



open Nat Int Real Finset MeasureTheory
open scoped Topology

namespace MeasureTheory

variable {Œ± Œ≤ Œπ : Type*} {m : MeasurableSpace Œ±} [n : MetricSpace Œ≤] {Œº : Measure Œ±}


-- aim is to prove Lusin's Theorem for the Borel sigma algebra specifically
-- this is slightly more restrictive than the theorem in Cohn's book



class T2LocallyCompactSpace (X : Type u) [TopologicalSpace X] : Prop where
  /-- In a locally compact space,
    every neighbourhood of every point contains a compact neighbourhood of that same point.
    In a T2 space distinct points are contained within disjoint open sets--/
  local_compact_nhds : ‚àÄ (x : X), ‚àÄ n ‚àà ùìù x, ‚àÉ s ‚àà ùìù x, s ‚äÜ n ‚àß IsCompact s
  t2 : ‚àÄ (x y : X), x ‚â† y ‚Üí ‚àÉ u v, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß Disjoint u v


class T2LocallyCompactBorelSpace (X : Type*)[TopologicalSpace X] [T2LocallyCompactSpace X] [MeasurableSpace X] : Prop where
  /- The measurable sets are exactly the Borel-measurable sets. -/
  measurable_eq : ‚ÄπMeasurableSpace X‚Ä∫ = borel X

variable  {X : Type} [TopologicalSpace X] {U V C D Y Z : Set X}


/--Checking that properties work as we would expect --/

theorem IsOpenDoubleUnion  {s‚ÇÅ : Set X} {s‚ÇÇ : Set X} [T2LocallyCompactSpace X](h‚ÇÅ : IsOpen s‚ÇÅ) (h‚ÇÇ : IsOpen s‚ÇÇ) : IsOpen (s‚ÇÅ ‚à™ s‚ÇÇ) :=
by exact IsOpen.union h‚ÇÅ h‚ÇÇ
theorem IsOpenUnion {s : Set (Set X)}  [T2LocallyCompactSpace X] (h: ‚àÄ p ‚àà s, IsOpen p) : IsOpen (‚ãÉ‚ÇÄ s) :=
by exact isOpen_sUnion h

variable {X: Type*} {m : T2LocallyCompactBorelSpace Œ±} [MetricSpace ‚Ñù] {Œº : Measure.Regular Œ±}
